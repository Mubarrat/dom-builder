class Html{constructor(...elements){if(!Array.isArray(elements)){throw new Error("Invalid elements provided")}this.elements=elements}build(){const fragment=document.createDocumentFragment();for(const element of this.elements){fragment.appendChild(element.build())}return fragment}}class HtmlItem{constructor(tagName,attributes={},...children){if(!tagName||typeof tagName!=="string"){throw new Error("Invalid tagName provided")}if(!(attributes instanceof HtmlAttributes||typeof attributes==="object")){throw new Error("Invalid attributes provided")}if(!Array.isArray(children)){throw new Error("Invalid children provided")}this.tagName=tagName.trim();if(attributes instanceof HtmlAttributes){this.attributes=attributes}else{this.attributes=new HtmlAttributes(attributes)}this.children=children}build(){const element=document.createElement(this.tagName);this.attributes.build(element);this.appendChildren(element,this.children);return element}appendChildren(parentElement,...children){for(const child of children){switch(typeof child){case"string":parentElement.appendChild(document.createTextNode(child));break;case"object":if(child instanceof HtmlItem){parentElement.appendChild(child.build())}else if(Array.isArray(child)){this.appendChildren(parentElement,...child)}else{parentElement.appendChild(document.createTextNode(JSON.stringify(child)))}break;default:parentElement.appendChild(document.createTextNode(String(child)));break}}return this}static createProxy(){return new Proxy(this,{get:function(target,prop){if(prop in target){return target[prop]}else{const tagName=prop.replace(/([A-Z])/g,"-$1").toLowerCase();return function(attributes,...children){return new HtmlItem(tagName,attributes,...children)}}}})}}class HtmlAttributes{constructor(attributes={}){if(typeof attributes!=="object"){throw new Error("Invalid attributes provided")}this.attributes=attributes}build(element){for(const attr of Object.keys(this.attributes)){const value=this.attributes[attr];if(attr==="class"){element.classList.add(...value.split(" "))}else if(attr==="style"&&typeof value==="object"){Object.assign(element.style,value)}else if(attr==="on"&&typeof value==="object"){for(const eventName in value){this.addEvents(element,eventName,false,value[eventName])}}else if(attr.startsWith("on")){this.addEvents(element,attr.toLowerCase().substring(2),false,value)}else{element.setAttribute(attr,typeof value==="object"?JSON.stringify(value):value)}}return element}addEvents(element,eventName,useCapture=false,...events){for(const event of events){if(typeof event==="function"){element.addEventListener(eventName,event,useCapture)}else if(Array.isArray(event)){this.addEvents(element,eventName,useCapture,...event)}}return this}}const $html=HtmlItem.createProxy();