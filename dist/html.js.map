{"version":3,"file":"html.js","sourceRoot":"./src/","sources":["eventType.ts","html.ts","htmlAttributes.ts","htmlItem.ts"],"names":[],"mappings":";AAwBA;;;;;;GAMG;ACHH,MAAM,IAAI;IAWR,YAAY,GAAG,QAAoB;QAGjC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;YAG7B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAGD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAMD,KAAK;QAGH,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;QAGnD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAGpC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QACxC,CAAC;QAGD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AC3CD,MAAM,cAAc;IAWlB,YAAY,aAAqB,EAAE;QAGjC,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE,CAAC;YAGnC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QAGD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAOD,KAAK,CAAC,OAAoB;QAGxB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAGhD,MAAM,KAAK,GAAI,IAAI,CAAC,UAAkC,CAAC,IAAI,CAAC,CAAC;YAG7D,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;gBAGrB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7C,CAAC;iBAGI,IAAI,IAAI,KAAK,OAAO,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAGvD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACtC,CAAC;iBAGI,IAAI,IAAI,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAGpD,KAAK,MAAM,SAAS,IAAI,KAAK,EAAE,CAAC;oBAG9B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC9D,CAAC;YACH,CAAC;iBAGI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;gBAG/B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACzE,CAAC;iBAGI,IAAI,IAAI,KAAK,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAGtD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;oBAGzB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;oBAGzB,OAAO,CAAC,YAAY,CAAC,QAAQ,IAAI,EAAE,EAGjC,OAAO,IAAI,KAAK,QAAQ;wBAGxB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;wBAGtB,CAAC,CAAC,IAAI,CAAC,CAAC;gBACZ,CAAC;YACH,CAAC;iBAGI,CAAC;gBAGJ,OAAO,CAAC,YAAY,CAAC,IAAI,EAGvB,OAAO,KAAK,KAAK,QAAQ;oBAGzB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;oBAGvB,CAAC,CAAC,KAAK,CAAC,CAAC;YACb,CAAC;QACH,CAAC;QAGD,OAAO,OAAO,CAAC;IACjB,CAAC;IASD,SAAS,CAAC,OAAoB,EAAE,SAAiB,EAAE,aAAsB,KAAK,EAAE,GAAG,MAAmB;QAGpG,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAG3B,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE,CAAC;gBAGhC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;YACzD,CAAC;iBAGI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBAG9B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAGD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AC/ID,MAAM,QAAQ;IAuBZ,YAAY,OAAe,EAAE,aAAsC,EAAE,EAAE,GAAG,QAAe;QAGvF,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAG5C,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QAGD,IAAI,CAAC,CAAC,UAAU,YAAY,cAAc,IAAI,OAAO,UAAU,KAAK,QAAQ,CAAC,EAAE,CAAC;YAG9E,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QAGD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;YAG7B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAGD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,CAAC,UAAU;YAGb,UAAU,YAAY,cAAc;gBAGpC,CAAC,CAAC,UAAU;gBAGZ,CAAC,CAAC,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;QAGnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAMD,KAAK;QAGH,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAGrD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAG/B,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAG5C,OAAO,OAAO,CAAC;IACjB,CAAC;IAOD,cAAc,CAAC,aAA0B,EAAE,GAAG,QAAe;QAG3D,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAG7B,QAAQ,OAAO,KAAK,EAAE,CAAC;gBAGrB,KAAK,QAAQ;oBAGX,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC1D,MAAM;gBAGR,KAAK,QAAQ;oBAGX,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;wBAGzB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,KAAK,CAAC,CAAC;oBAC/C,CAAC;yBAGI,CAAC;wBAGJ,aAAa,CAAC,WAAW,CAGvB,KAAK,YAAY,QAAQ;4BAGzB,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE;4BAGf,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CACjD,CAAC;oBACJ,CAAC;oBACD,MAAM;gBAGR;oBAGE,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAClE,MAAM;YACV,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAMD,MAAM,CAAC,WAAW;QAGhB,OAAO,IAAI,KAAK,CAAC,IAAI,EAAE;YAGrB,GAAG,EAAE,UAAS,MAAM,EAAE,IAAY;gBAGhC,IAAI,IAAI,IAAI,MAAM,EAAE,CAAC;oBAGnB,OAAQ,MAAc,CAAC,IAAI,CAAC,CAAC;gBAC/B,CAAC;qBAGI,CAAC;oBAGJ,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;oBAG9D,OAAO,UAAS,UAAyC,EAAE,GAAG,QAAe;wBAG3E,IAAI,CAAC,CAAC,UAAU,YAAY,cAAc,IAAI,OAAO,UAAU,KAAK,QAAQ,CAAC,EAAE,CAAC;4BAG9E,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC,CAAC;wBAC5D,CAAC;wBAGD,OAAO,IAAI,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC,CAAC;oBACxD,CAAC,CAAC;gBACJ,CAAC;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAGD,CAAC,UAAS,OAAO;IAGf,YAAY,CAAC;IAGb,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;AAEzC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC","sourcesContent":["/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/*!\r\n * Html-Builder JavaScript Library v1.0.4\r\n * https://github.com/Mubarrat/html-builder/\r\n * \r\n * Released under the MIT license\r\n * https://github.com/Mubarrat/html-builder/blob/main/LICENSE\r\n */\r\n\r\n/**\r\n * Recursive EventType type definition for HTML events\r\n */\r\ntype EventType = EventListener | EventType[];\r\n","/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * Html class to manage HTML element creation\r\n */\r\nclass Html {\r\n\r\n  /**\r\n   * Array to hold HtmlItem elements\r\n   */\r\n  elements: HtmlItem[];\r\n\r\n  /**\r\n   * Constructor to initialize HtmlItem elements\r\n   * @param elements The elemenets\r\n   */\r\n  constructor(...elements: HtmlItem[]) {\r\n\r\n    // Validate elements as an array\r\n    if (!Array.isArray(elements)) {\r\n      \r\n      // Since array isn't validated, let's throw an error\r\n      throw new Error(\"Invalid elements provided\");\r\n    }\r\n\r\n    // Assign elements\r\n    this.elements = elements;\r\n  }\r\n\r\n  /**\r\n   * Method to build and return a DocumentFragment\r\n   * @returns Returns a DocumentFragment\r\n   */\r\n  build(): DocumentFragment {\r\n\r\n    // Create a DocumentFragment\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    // Append children to the DocumentFragment\r\n    for (const element of this.elements) {\r\n\r\n      // Append a child to the DocumentFragment\r\n      fragment.appendChild(element.build());\r\n    }\r\n    \r\n    // Return the DocumentFragment\r\n    return fragment;\r\n  }\r\n}\r\n","/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * HtmlAttributes class to manage HTML element attributes.\r\n */\r\nclass HtmlAttributes {\r\n  \r\n  /**\r\n   * Object to hold HTML attributes\r\n   */\r\n  attributes: object;\r\n\r\n  /**\r\n   * To initialize attributes for HTML element.\r\n   * @param attributes An set of attributes.\r\n   */\r\n  constructor(attributes: object = {}) {\r\n\r\n    // Validate attributes as an object\r\n    if (typeof attributes !== \"object\") {\r\n\r\n      // Since attributes aren't validated, let's throw an error.\r\n      throw new Error(\"Invalid attributes provided\");\r\n    }\r\n\r\n    // Assign attributes\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  /**\r\n   * Method to apply attributes to an HTMLElement.\r\n   * @param element The element to be built.\r\n   * @returns The element is given by.\r\n   */\r\n  build(element: HTMLElement): HTMLElement {\r\n\r\n    // Process and apply attributes to the element\r\n    for (const attr of Object.keys(this.attributes)) {\r\n\r\n      // Get the value from Object\r\n      const value = (this.attributes as Record<string, any>)[attr];\r\n\r\n      // Handle class attribute\r\n      if (attr === 'class') {\r\n\r\n        // Add classes to the element\r\n        element.classList.add(...value.split(' '));\r\n      }\r\n\r\n      // Handle style attribute\r\n      else if (attr === 'style' && typeof value === 'object') {\r\n\r\n        // Merge styles into element's style attribute\r\n        Object.assign(element.style, value);\r\n      }\r\n\r\n      // Assuming 'on' is an object containing event listeners\r\n      else if (attr === 'on' && typeof value === 'object') {\r\n\r\n        // Iterate over events and attach them to the element\r\n        for (const eventName in value) {\r\n\r\n          // Recursively add events\r\n          this.addEvents(element, eventName, false, value[eventName]);\r\n        }\r\n      }\r\n\r\n      // Handle event listeners\r\n      else if (attr.startsWith('on')) {\r\n\r\n        // Recursively add events\r\n        this.addEvents(element, attr.toLowerCase().substring(2), false, value);\r\n      }\r\n\r\n      // Assuming 'data' is an object containing data information\r\n      else if (attr === 'data' && typeof value === 'object') {\r\n\r\n        // Iterate over data information\r\n        for (const name in value) {\r\n\r\n          // Define value from name of value\r\n          const data = value[name];\r\n\r\n          // Add data to elements\r\n          element.setAttribute(`data-${name}`,\r\n\r\n            // If data is an object\r\n            typeof data === 'object'\r\n            \r\n            // Stringify it\r\n            ? JSON.stringify(data)\r\n            \r\n            // Otherwise set it as provided\r\n            : data);\r\n        }\r\n      }\r\n\r\n      // Handle other attributes\r\n      else {\r\n\r\n        // Set attributes\r\n        element.setAttribute(attr,\r\n          \r\n          // If value is an object\r\n          typeof value === 'object'\r\n          \r\n          // Stringify it\r\n          ? JSON.stringify(value)\r\n          \r\n          // Otherwise set it as provided\r\n          : value);\r\n      }\r\n    }\r\n\r\n    // Return a element\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Recursively adds events to a given element.\r\n   * @param element The element where events are added.\r\n   * @param eventName The event name of the functions.\r\n   * @param useCapture If you want to use bubbling, then set true. The default is false.\r\n   * @param events The array of functions or functions.\r\n   */\r\n  addEvents(element: HTMLElement, eventName: string, useCapture: boolean = false, ...events: EventType[]): HtmlAttributes {\r\n    \r\n    // Iterate event over events\r\n    for (const event of events) {\r\n\r\n      // Check if the event is a function\r\n      if (typeof event === 'function') {\r\n\r\n        // Add event listener to the element based on the useCapture parameter\r\n        element.addEventListener(eventName, event, useCapture);\r\n      }\r\n\r\n      // Check if the event is an array\r\n      else if (Array.isArray(event)) {\r\n\r\n        // Recursively add events\r\n        this.addEvents(element, eventName, useCapture, ...event);\r\n      }\r\n    }\r\n\r\n    // Return this class for chaining\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * HtmlItem class representing HTML elements\r\n */\r\nclass HtmlItem {\r\n\r\n  /**\r\n   * Array to hold HTML children\r\n   */\r\n  children: any[];\r\n\r\n  /**\r\n   * Object to hold HTML attributes\r\n   */\r\n  attributes: HtmlAttributes;\r\n\r\n  /**\r\n   * Name of the HTML tag\r\n   */\r\n  tagName: string;\r\n\r\n  /**\r\n   * Constructor to initialize HtmlItem elements\r\n   * @param tagName The tag name of HTML element\r\n   * @param attributes The attributes of HTML element\r\n   * @param children The children of HTML element\r\n   */\r\n  constructor(tagName: string, attributes: HtmlAttributes | object = {}, ...children: any[]) {\r\n\r\n    // Validate tag name as a non-empty string\r\n    if (!tagName || typeof tagName !== \"string\") {\r\n\r\n      // Since tag name isn't validated, let's throw an error.\r\n      throw new Error(\"Invalid tagName provided\");\r\n    }\r\n\r\n    // Validate attributes as an HtmlAttributes instance or regular object\r\n    if (!(attributes instanceof HtmlAttributes || typeof attributes === \"object\")) {\r\n\r\n      // Since attributes aren't validated, let's throw an error.\r\n      throw new Error(\"Invalid attributes provided\");\r\n    }\r\n\r\n    // Validate children as an array\r\n    if (!Array.isArray(children)) {\r\n\r\n      // Since children aren't validated, let's throw an error.\r\n      throw new Error(\"Invalid children provided\");\r\n    }\r\n\r\n    // If 'tagName' contains some spaces front or end, trim it\r\n    this.tagName = tagName.trim();\r\n\r\n    this.attributes =\r\n\r\n      // If 'attribute' is an instance of HtmlAttributes,\r\n      attributes instanceof HtmlAttributes\r\n\r\n      // just directly assign it\r\n      ? attributes\r\n\r\n      // Otherwise if 'attribute' is a regular object, create an HtmlAttribute instance from it\r\n      : new HtmlAttributes(attributes);\r\n\r\n    // Assign children to this\r\n    this.children = children;\r\n  }\r\n\r\n  /**\r\n   * Method to build and return an HTMLElement.\r\n   * @returns Returns an HTMLElement.\r\n   */\r\n  build(): HTMLElement {\r\n\r\n    // Create the element\r\n    const element = document.createElement(this.tagName);\r\n\r\n    // Apply attributes to the element\r\n    this.attributes.build(element);\r\n\r\n    // Append children recursively to the element\r\n    this.appendChildren(element, this.children);\r\n\r\n    // Return a element\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Helper method to recursively append children to an HTML element.\r\n   * @param parentElement The parent element where the children will be appended.\r\n   * @param children The children to be appended in the parent element.\r\n   */\r\n  appendChildren(parentElement: HTMLElement, ...children: any[]): HtmlItem {\r\n\r\n    // Iterate child over children\r\n    for (const child of children) {\r\n\r\n      // Compare type of child\r\n      switch (typeof child) {\r\n\r\n        // Text node\r\n        case \"string\":\r\n\r\n          // Append the text node\r\n          parentElement.appendChild(document.createTextNode(child));\r\n          break;\r\n\r\n        // An object\r\n        case \"object\":\r\n\r\n          // Check if child is an array\r\n          if (Array.isArray(child)) {\r\n\r\n            // Array of children, recursively append\r\n            this.appendChildren(parentElement, ...child);\r\n          }\r\n\r\n          // Otherwise\r\n          else {\r\n\r\n            // Append child to the parent element\r\n            parentElement.appendChild(\r\n\r\n              // Check if child is HTMLElement\r\n              child instanceof HtmlItem\r\n\r\n              // Append HTMLElement child to parent\r\n              ? child.build()\r\n\r\n              // If anything else, convert object to string and append as text node\r\n              : document.createTextNode(JSON.stringify(child))\r\n            );\r\n          }\r\n          break;\r\n\r\n        // If anything else\r\n        default:\r\n\r\n          // Convert other types to string and append as text node\r\n          parentElement.appendChild(document.createTextNode(String(child)));\r\n          break;\r\n      }\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Create a proxy for custom element creation.\r\n   * @returns A proxy for custom element creation.\r\n   */\r\n  static createProxy(): typeof HtmlItem {\r\n\r\n    // Return a proxy\r\n    return new Proxy(this, {\r\n\r\n      // Assign a get function\r\n      get: function(target, prop: string) {\r\n\r\n        // If the method name is in this class\r\n        if (prop in target) {\r\n\r\n          // Return the method for invoking\r\n          return (target as any)[prop];\r\n        }\r\n        \r\n        // Method is just a HTML predefined name\r\n        else {\r\n          \r\n          // Fix the method name\r\n          const tagName = prop.replace(/([A-Z])/g, \"-$1\").toLowerCase();\r\n\r\n          // Convert method call to custom element name\r\n          return function(attributes: HtmlAttributes | object | any, ...children: any[]) {\r\n            \r\n            // If element initialized without attributes\r\n            if (!(attributes instanceof HtmlAttributes || typeof attributes === \"object\")) {\r\n\r\n              // Return this class without attributes but as children as they no longer attributes\r\n              return new HtmlItem(tagName, {}, attributes, ...children);\r\n            }\r\n            \r\n            // Otherwise, return this class\r\n            return new HtmlItem(tagName, attributes, ...children);\r\n          };\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n// A function that create global variable to define HtmlItem\r\n(function(globals){\r\n\r\n  // Use strict for \r\n  \"use strict\";\r\n\r\n  // Create an instance of the html class with a proxy for element creation.\r\n  globals.$html = HtmlItem.createProxy();\r\n  \r\n}(this));\r\n"]}